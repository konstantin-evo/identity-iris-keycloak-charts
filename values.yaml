# SPDX-FileCopyrightText: 2025 Deutsche Telekom AG
#
# SPDX-License-Identifier: Apache-2.0

global:
  metadata:
    pipeline: {}

  platform: kubernetes
  #storageClassName: ""
  #volumeName: "pvcNameToOverride"
  domain: ""
  labels:
    # Common labels for all resources
    common: []
    # Monitoring related Labels
    monitoring:
      # General monitoring labels
      general: []
      # Labels for monitoring specific to Keycloak service
      keycloak: []
      # Labels for monitoring database services
      database: []
  product: "iris_keycloak"
  ingress:
    # tlsSecret: ""
    # ingressClassName: ""
    annotations: {}
      # external-dns.alpha.kubernetes.io/target: ""
      # kubernetes.io/ingress.class: ""
  image:
    repository: iris_keycloak
    tag: latest
    pullPolicy: IfNotPresent
  # If imagePullSecrets is not empty, a pull secret will be deployed for each entry otherwise
  # no pull secret will be deployed
  imagePullSecrets: []
  #- name: secret
  #  registry: https://<your-registry>
  #  username: changeme
  #  password: changeme
  imagePullPolicy: IfNotPresent

  # Configuration for external secrets integration (e.g., HashiCorp Vault, AWS Secrets Manager, etc.)
  externalSecrets:
    enabled: false
    path: "secret/data/my-app"

  database:
    location: local
    #port: 5432
    database: pgdb
    username: pgusr
    password: not_secure_pwd

  failOnUnsetValues: true

#imagePullPolicy: IfNotPresent

# You can list files (in /templates) here that should cause a re-deployment of your application
# when their contents change
# This makes sense if you change configMaps or secrets, and you
# want your deployment to use the latest configuration
templateChangeTriggers: []
#- my-custom-configmap.yaml

#podSecurityContext: {}
  #fsGroup: 999
  #supplementalGroups: 999

containerSecurityContext: {}
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true

#topologyKey: kubernetes.io/hostname


# Keycloak admin role credentials
adminUsername: admin
adminPassword: changeme

# Infinispan cache configuration for Keycloak
# This configuration defines cache containers, transport settings, and cache-specific configurations
infinispan:
  enabled: true
  nativeConfig: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <infinispan
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="urn:infinispan:config:15.0 http://www.infinispan.org/schemas/infinispan-config-15.0.xsd"
            xmlns="urn:infinispan:config:15.0">
        <cache-container name="keycloak">
            <transport lock-timeout="60000"/>
            <local-cache name="realms" simple-cache="true">
                <encoding>
                    <key media-type="application/x-java-object"/>
                    <value media-type="application/x-java-object"/>
                </encoding>
                <memory max-count="10000"/>
            </local-cache>
            <local-cache name="users" simple-cache="true">
                <encoding>
                    <key media-type="application/x-java-object"/>
                    <value media-type="application/x-java-object"/>
                </encoding>
                <memory max-count="10000"/>
            </local-cache>
            <distributed-cache name="sessions" owners="2">
                <expiration lifespan="-1"/>
            </distributed-cache>
            <distributed-cache name="authenticationSessions" owners="2">
                <expiration lifespan="-1"/>
            </distributed-cache>
            <distributed-cache name="offlineSessions" owners="2">
                <expiration lifespan="-1"/>
            </distributed-cache>
            <distributed-cache name="clientSessions" owners="2">
                <expiration lifespan="-1"/>
            </distributed-cache>
            <distributed-cache name="offlineClientSessions" owners="2">
                <expiration lifespan="-1"/>
            </distributed-cache>
            <distributed-cache name="loginFailures" owners="2">
                <expiration lifespan="-1"/>
            </distributed-cache>
            <local-cache name="authorization" simple-cache="true">
                <encoding>
                    <key media-type="application/x-java-object"/>
                    <value media-type="application/x-java-object"/>
                </encoding>
                <memory max-count="10000"/>
            </local-cache>
            <replicated-cache name="work">
                <expiration lifespan="-1"/>
            </replicated-cache>
            <local-cache name="keys" simple-cache="true">
                <encoding>
                    <key media-type="application/x-java-object"/>
                    <value media-type="application/x-java-object"/>
                </encoding>
                <expiration max-idle="3600000"/>
                <memory max-count="1000"/>
            </local-cache>
            <distributed-cache name="actionTokens" owners="2">
                <encoding>
                    <key media-type="application/x-java-object"/>
                    <value media-type="application/x-java-object"/>
                </encoding>
                <expiration max-idle="-1" lifespan="-1" interval="300000"/>
                <memory max-count="-1"/>
            </distributed-cache>
        </cache-container>
    </infinispan>

replicas: 1

autoscaling:
  enabled: false
  #minReplicas: 2
  #maxReplicas: 4
  #targetCPUUtilizationPercentage: 80

resources:
  limits:
    cpu: 1
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 600Mi

livenessProbe: |-
  httpGet:
    path: '/auth/'
    port: 8080
  initialDelaySeconds: 300
  timeoutSeconds: 5

readinessProbe: |-
  httpGet:
    path: '/auth/realms/master'
    port: 8080
  initialDelaySeconds: 30
  timeoutSeconds: 1

startupProbe: |-
  httpGet:
    path: '/auth/'
    port: 8080
  initialDelaySeconds: 30
  timeoutSeconds: 1
  failureThreshold: 60
  periodSeconds: 5

terminationGracePeriodSeconds: 60

#logLevel: INFO

ingress:
  enabled: true
  hostname: localhost
  # alternative second host name in ingress
  #altHostname: ""
  # overwrite host used in KC_HOSTNAME
  #adminHostname: ""
  # tlsSecret: ""
  ingressClassName: "nginx"
  annotations: {}
    # external-dns.alpha.kubernetes.io/target: ""
    # kubernetes.io/ingress.class: ""

    ## With multiple replicas it might be necessary to add below cookie options to the ingress.
    # nginx.ingress.kubernetes.io/affinity: 'cookie'
    # nginx.ingress.kubernetes.io/session-cookie-path: '/'

prometheus:
  enabled: true
  authToken: changeme
  #port: 9542
  #path: /metrics
  # podMonitor is used to provide a PodMonitor CRD to integrate with prometheus operator
  # prometheus has to be enabled to use this
  serviceMonitor:
    enabled: true
    targetLabels: []
    #selector: "guardians-raccoon"
    #scheme: http
    #interval: "15s"
    #scrapeTimeout: "3s"
    #honorLabels: ""
  podMonitor:
    enabled: false
    #selector: "guardians-raccoon"
    #scheme: http
    #interval: "15s"
    #scrapeTimeout: "3s"
    #honorLabels: ""

customConfig:
  # With the following setting one can set the frontendUrl configuration for hostname SPI
  #frontendUrl: '${keycloak.frontendUrl:}'

  spi: {}
  # As an alternative, one can replace the whole SPI "hostname" configuration block, however this overrides the frontendUrl variable
  #spi:
  #  hostname: |-
  #   <spi name="hostname">
  #     <!-- some xml config -->
  #   </spi>

haproxy:
  image:
    repository: haproxy
    tag: 2.4.0-alpine
    pullPolicy: IfNotPresent
  containerSecurityContext: {}
  resources:
    limits:
      memory: 1Gi
      cpu: 1
    requests:
      memory: 250Mi
      cpu: 250m

postgresql:
  image:
    repository: bitnami/postgresql
    tag: 12.3.0-debian-10-r70
    pullPolicy: IfNotPresent
  containerSecurityContext: {}

  maxPreparedTransactions: "100"

  resources:
    limits:
      cpu: 100m
      memory: 500Mi
    requests:
      cpu: 20m
      memory: 200Mi

externalDatabase:
  # Set host if you use an external database or service name is not sufficient
  #host: ''
  ssl: false
  #sslMode: 'verify-full'
  #sslCert: |
  #  -----BEGIN CERTIFICATE-----
  #  <CA certificate in PEM format here>
  #  -----END CERTIFICATE-----
  #sslKey: |
  #  -----BEGIN PRIVATE KEY-----
  #  <pk8 in PEM format here>
  #  -----END PRIVATE KEY-----
  #sslRootCert: |
  #  -----BEGIN CERTIFICATE-----
  #  <Root certificate in PEM format here>
  #  -----END CERTIFICATE-----
